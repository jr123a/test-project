Thanks for uploading your full configuration stack. Based on a deep review of the following:

* `web.xml`
* `faces-config.xml`
* Spring `application-context.xml`
* `ibm-web-ext.xml` and `ibm-web-bnd.xml`

I can now confirm with high confidence what’s going wrong in WAS 9 — and how to fix it.

---

### ❌ Root Problems Identified

#### 1. **JSF Version Declared Is Too Old**

* Your `faces-config.xml` is declared as:

  ```xml
  version="2.0"
  ```
* But **WAS 9 uses JSF 2.2+ by default**.
* This mismatch can break:

  * EL resolution
  * ViewState behavior
  * Partial rendering

✅ **Fix**: Change your `faces-config.xml` to:

```xml
<faces-config
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"
    version="2.2">
```

---

#### 2. **You Are Using MyFaces but JSF State Saving Is Set to `server`**

* Your `web.xml` has this:

  ```xml
  <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
  <param-value>server</param-value>
  ```
* But also:

  ```xml
  <param-name>org.apache.myfaces.SERIALIZE_STATE_IN_SESSION</param-name>
  <param-value>false</param-value>
  ```
* This is a **conflict**. You're telling MyFaces **not** to store state in session, but then saying to **use server-side state saving**.

✅ **Fix**:

* Change this to:

  ```xml
  <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
  <param-value>client</param-value>
  ```
* Or, if staying with `server`, set:

  ```xml
  <param-name>org.apache.myfaces.SERIALIZE_STATE_IN_SESSION</param-name>
  <param-value>true</param-value>
  ```

---

#### 3. **Potential CDI vs JSF ManagedBean Conflict**

* You're using both:

  ```java
  @ManagedBean(name = "bean")
  @ViewScoped
  ```
* And enabling CDI:

  ```xml
  <param-name>org.apache.myfaces.CDI_MANAGED</param-name>
  <param-value>true</param-value>
  ```

✅ **Fix**:

* Choose one:

  * Either move fully to **CDI beans**: use `@Named("bean")` and `@ViewScoped` from `javax.faces.view`.
  * Or disable CDI support in MyFaces via:

    ```xml
    <param-name>org.apache.myfaces.CDI_MANAGED</param-name>
    <param-value>false</param-value>
    ```

---

### ✅ Recommended Configuration Summary for WAS 9

| Config Area                                     | Value                                                                                  |
| ----------------------------------------------- | -------------------------------------------------------------------------------------- |
| `faces-config.xml`                              | Use `version="2.2"` and updated schema                                                 |
| `javax.faces.STATE_SAVING_METHOD`               | `client` *(recommended)*                                                               |
| `org.apache.myfaces.SERIALIZE_STATE_IN_SESSION` | Should match `STATE_SAVING_METHOD`                                                     |
| CDI usage                                       | Either fully commit to CDI (`@Named`, `@Inject`) or turn it off and use `@ManagedBean` |
| `execute` in `<a4j:ajax>`                       | Use `@this` or specific component ID, **never `@component`**                           |

---

### ✅ Next Steps

1. **Fix `faces-config.xml` version to 2.2**
2. **Update `web.xml` for consistent state saving**
3. **Commit to either CDI or JSF bean management**
4. **Redeploy and test the basic page with `<f:ajax>` again**

If you're ready, I can produce a fixed version of all your config snippets (faces-config.xml, web.xml params) in one place so you can copy/paste.

Would you like that?













-------------------------------------------
Here is your **corrected and aligned JSF configuration set** for **WAS 9 + MyFaces + Spring**, with full compatibility for AJAX, ViewState, and managed beans:

---

### ✅ `faces-config.xml` (Upgrade to JSF 2.2 Schema)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<faces-config
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"
    version="2.2">
    
    <application>
        <el-resolver>org.springframework.web.jsf.el.SpringBeanFacesELResolver</el-resolver>
    </application>

</faces-config>
```

---

### ✅ `web.xml` Context Parameters (Fix Inconsistencies)

Replace the relevant params in your existing `web.xml`:

```xml
<!-- JSF State Saving: Use client-side for WAS 9 consistency -->
<context-param>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>client</param-value>
</context-param>

<!-- Set project stage to Development for now (enables better error output) -->
<context-param>
    <param-name>javax.faces.PROJECT_STAGE</param-name>
    <param-value>Development</param-value>
</context-param>

<!-- MyFaces: Make sure these align with state saving -->
<context-param>
    <param-name>org.apache.myfaces.SERIALIZE_STATE_IN_SESSION</param-name>
    <param-value>false</param-value>
</context-param>

<!-- CDI: Recommended to DISABLE if you're using @ManagedBean instead of @Named -->
<context-param>
    <param-name>org.apache.myfaces.CDI_MANAGED</param-name>
    <param-value>false</param-value>
</context-param>

<context-param>
    <param-name>org.apache.myfaces.annotation.USE_CDI_FOR_ANNOTATION_SCANNING</param-name>
    <param-value>false</param-value>
</context-param>
```

---

### ✅ Your Java Backing Bean

If you're using `@ManagedBean`, keep it clean:

```java
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import java.io.Serializable;

@ManagedBean(name = "bean")
@ViewScoped
public class SponsorEmailAdminBean implements Serializable {
    // your logic
}
```

Or switch to CDI (recommended for future-proofing):

```java
import javax.inject.Named;
import javax.faces.view.ViewScoped;
import java.io.Serializable;

@Named("bean")
@ViewScoped
public class SponsorEmailAdminBean implements Serializable {
    // your logic
}
```

But don't **mix** both. Use either `@ManagedBean` or `@Named`, not both.

---

### ✅ Deploy Order

1. Stop app in WAS 9.
2. Clean application cache (optional but helpful).
3. Deploy updated WAR.
4. Test your AJAX interactions (with `<f:ajax>` or `<a4j:ajax>`) again.

---

This setup ensures:

* JSF 2.2 is correctly activated
* State saving works reliably across AJAX
* ViewScoped beans are preserved
* JSF/EL expression resolution works with Spring-managed beans

Let me know when you're ready — I can help verify results or guide you through switching to CDI gradually.
